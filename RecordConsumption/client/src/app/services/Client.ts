//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
  }

  /**
   * @return Success
   */
  adminDoctorGetList(): Observable<DoctorDto[]> {
    let url_ = this.baseUrl + "/api/AdminDoctor/AdminDoctorGetList";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminDoctorGetList(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminDoctorGetList(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<DoctorDto[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<DoctorDto[]>;
    }));
  }

  protected processAdminDoctorGetList(response: HttpResponseBase): Observable<DoctorDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(DoctorDto.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  adminDoctorGet(id: number | undefined): Observable<DoctorEditDto> {
    let url_ = this.baseUrl + "/api/AdminDoctor/AdminDoctorGet?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminDoctorGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminDoctorGet(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<DoctorEditDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<DoctorEditDto>;
    }));
  }

  protected processAdminDoctorGet(response: HttpResponseBase): Observable<DoctorEditDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DoctorEditDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  adminDoctorCreate(body: DoctorEditDto | undefined): Observable<number> {
    let url_ = this.baseUrl + "/api/AdminDoctor/AdminDoctorCreate";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminDoctorCreate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminDoctorCreate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<number>;
        }
      } else
        return _observableThrow(response_) as any as Observable<number>;
    }));
  }

  protected processAdminDoctorCreate(response: HttpResponseBase): Observable<number> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : <any>null;

        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  adminDoctorEdit(body: DoctorEditDto | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/AdminDoctor/AdminDoctorEdit";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminDoctorEdit(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminDoctorEdit(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAdminDoctorEdit(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  adminDoctorDelete(id: number | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/AdminDoctor/AdminDoctorDelete?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminDoctorDelete(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminDoctorDelete(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAdminDoctorDelete(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  adminPolyclinicGetList(): Observable<PolyclinicDto[]> {
    let url_ = this.baseUrl + "/api/AdminPolyclinic/AdminPolyclinicGetList";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminPolyclinicGetList(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminPolyclinicGetList(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<PolyclinicDto[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<PolyclinicDto[]>;
    }));
  }

  protected processAdminPolyclinicGetList(response: HttpResponseBase): Observable<PolyclinicDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(PolyclinicDto.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  adminPolyclinicGet(id: number | undefined): Observable<PolyclinicDto> {
    let url_ = this.baseUrl + "/api/AdminPolyclinic/AdminPolyclinicGet?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminPolyclinicGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminPolyclinicGet(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<PolyclinicDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<PolyclinicDto>;
    }));
  }

  protected processAdminPolyclinicGet(response: HttpResponseBase): Observable<PolyclinicDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PolyclinicDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  adminPolyclinicCreate(body: PolyclinicDto | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/AdminPolyclinic/AdminPolyclinicCreate";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminPolyclinicCreate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminPolyclinicCreate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAdminPolyclinicCreate(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  adminPolyclinicEdit(body: PolyclinicDto | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/AdminPolyclinic/AdminPolyclinicEdit";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminPolyclinicEdit(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminPolyclinicEdit(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAdminPolyclinicEdit(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  adminPolyclinicDelete(id: number | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/AdminPolyclinic/AdminPolyclinicDelete?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminPolyclinicDelete(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminPolyclinicDelete(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAdminPolyclinicDelete(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  adminSpecializationGetList(): Observable<SpecializationDto[]> {
    let url_ = this.baseUrl + "/api/AdminSpecialization/AdminSpecializationGetList";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminSpecializationGetList(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminSpecializationGetList(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<SpecializationDto[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<SpecializationDto[]>;
    }));
  }

  protected processAdminSpecializationGetList(response: HttpResponseBase): Observable<SpecializationDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(SpecializationDto.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  adminSpecializationGet(id: number | undefined): Observable<SpecializationDto> {
    let url_ = this.baseUrl + "/api/AdminSpecialization/AdminSpecializationGet?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminSpecializationGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminSpecializationGet(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<SpecializationDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<SpecializationDto>;
    }));
  }

  protected processAdminSpecializationGet(response: HttpResponseBase): Observable<SpecializationDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SpecializationDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  adminSpecializationCreate(body: SpecializationDto | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/AdminSpecialization/AdminSpecializationCreate";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminSpecializationCreate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminSpecializationCreate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAdminSpecializationCreate(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  adminSpecializationEdit(body: SpecializationDto | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/AdminSpecialization/AdminSpecializationEdit";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminSpecializationEdit(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminSpecializationEdit(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAdminSpecializationEdit(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  adminSpecializationDelete(id: number | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/AdminSpecialization/AdminSpecializationDelete?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminSpecializationDelete(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminSpecializationDelete(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAdminSpecializationDelete(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  adminTownGetList(): Observable<TownDto[]> {
    let url_ = this.baseUrl + "/api/AdminTown/AdminTownGetList";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminTownGetList(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminTownGetList(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<TownDto[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<TownDto[]>;
    }));
  }

  protected processAdminTownGetList(response: HttpResponseBase): Observable<TownDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(TownDto.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  adminTownGet(id: number | undefined): Observable<TownDto> {
    let url_ = this.baseUrl + "/api/AdminTown/AdminTownGet?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminTownGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminTownGet(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<TownDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<TownDto>;
    }));
  }

  protected processAdminTownGet(response: HttpResponseBase): Observable<TownDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TownDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  adminTownCreate(body: TownDto | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/AdminTown/AdminTownCreate";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminTownCreate(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminTownCreate(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAdminTownCreate(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  adminTownEdit(body: TownDto | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/AdminTown/AdminTownEdit";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminTownEdit(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminTownEdit(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAdminTownEdit(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  adminTownDelete(id: number | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/AdminTown/AdminTownDelete?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAdminTownDelete(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdminTownDelete(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAdminTownDelete(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @param page (optional) 
   * @param take (optional) 
   * @return Success
   */
  getDoctorsBySpecializationId(id: number | undefined, page: number | undefined, take: number | undefined): Observable<DoctorDtoPaginationDto> {
    let url_ = this.baseUrl + "/api/Doctor/GetDoctorsBySpecializationId?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    if (page === null)
      throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (take === null)
      throw new Error("The parameter 'take' cannot be null.");
    else if (take !== undefined)
      url_ += "take=" + encodeURIComponent("" + take) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetDoctorsBySpecializationId(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetDoctorsBySpecializationId(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<DoctorDtoPaginationDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<DoctorDtoPaginationDto>;
    }));
  }

  protected processGetDoctorsBySpecializationId(response: HttpResponseBase): Observable<DoctorDtoPaginationDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DoctorDtoPaginationDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  getDoctorById(id: number | undefined): Observable<DoctorViewDto> {
    let url_ = this.baseUrl + "/api/Doctor/GetDoctorById?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetDoctorById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetDoctorById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<DoctorViewDto>;
        }
      } else
        return _observableThrow(response_) as any as Observable<DoctorViewDto>;
    }));
  }

  protected processGetDoctorById(response: HttpResponseBase): Observable<DoctorViewDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DoctorViewDto.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param town (optional) 
   * @return Success
   */
  getList(town: string | null | undefined): Observable<SpecailizationWithDoctorsDto[]> {
    let url_ = this.baseUrl + "/api/Specialization/GetList?";
    if (town !== undefined && town !== null)
      url_ += "town=" + encodeURIComponent("" + town) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetList(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetList(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<SpecailizationWithDoctorsDto[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<SpecailizationWithDoctorsDto[]>;
    }));
  }

  protected processGetList(response: HttpResponseBase): Observable<SpecailizationWithDoctorsDto[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(SpecailizationWithDoctorsDto.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export class DoctorDto implements IDoctorDto {
  id?: number;
  firstName?: string | undefined;
  middleName?: string | undefined;
  lastName?: string | undefined;
  phone?: string | undefined;
  adress?: string | undefined;
  longDesk?: string | undefined;
  shortDesk?: string | undefined;
  photoBase64?: string | undefined;

  constructor(data?: IDoctorDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.phone = _data["phone"];
      this.adress = _data["adress"];
      this.longDesk = _data["longDesk"];
      this.shortDesk = _data["shortDesk"];
      this.photoBase64 = _data["photoBase64"];
    }
  }

  static fromJS(data: any): DoctorDto {
    data = typeof data === 'object' ? data : {};
    let result = new DoctorDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["phone"] = this.phone;
    data["adress"] = this.adress;
    data["longDesk"] = this.longDesk;
    data["shortDesk"] = this.shortDesk;
    data["photoBase64"] = this.photoBase64;
    return data;
  }

  clone(): DoctorDto {
    const json = this.toJSON();
    let result = new DoctorDto();
    result.init(json);
    return result;
  }
}

export interface IDoctorDto {
  id?: number;
  firstName?: string | undefined;
  middleName?: string | undefined;
  lastName?: string | undefined;
  phone?: string | undefined;
  adress?: string | undefined;
  longDesk?: string | undefined;
  shortDesk?: string | undefined;
  photoBase64?: string | undefined;
}

export class PhotoDto implements IPhotoDto {
  id?: number;
  nameFile?: string | undefined;
  base64?: string | undefined;

  constructor(data?: IPhotoDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.nameFile = _data["nameFile"];
      this.base64 = _data["base64"];
    }
  }

  static fromJS(data: any): PhotoDto {
    data = typeof data === 'object' ? data : {};
    let result = new PhotoDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["nameFile"] = this.nameFile;
    data["base64"] = this.base64;
    return data;
  }

  clone(): PhotoDto {
    const json = this.toJSON();
    let result = new PhotoDto();
    result.init(json);
    return result;
  }
}

export interface IPhotoDto {
  id?: number;
  nameFile?: string | undefined;
  base64?: string | undefined;
}

export class PracticeEditDto implements IPracticeEditDto {
  id?: number | undefined;
  start?: Date;
  end?: Date | undefined;
  price?: number;
  doctorId?: number | undefined;
  specializationId?: number;
  polyclinicId?: number;

  constructor(data?: IPracticeEditDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.start = _data["start"] ? new Date(_data["start"].toString()) : <any>undefined;
      this.end = _data["end"] ? new Date(_data["end"].toString()) : <any>undefined;
      this.price = _data["price"];
      this.doctorId = _data["doctorId"];
      this.specializationId = _data["specializationId"];
      this.polyclinicId = _data["polyclinicId"];
    }
  }

  static fromJS(data: any): PracticeEditDto {
    data = typeof data === 'object' ? data : {};
    let result = new PracticeEditDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["start"] = this.start ? this.start.toISOString() : <any>undefined;
    data["end"] = this.end ? this.end.toISOString() : <any>undefined;
    data["price"] = this.price;
    data["doctorId"] = this.doctorId;
    data["specializationId"] = this.specializationId;
    data["polyclinicId"] = this.polyclinicId;
    return data;
  }

  clone(): PracticeEditDto {
    const json = this.toJSON();
    let result = new PracticeEditDto();
    result.init(json);
    return result;
  }
}

export interface IPracticeEditDto {
  id?: number | undefined;
  start?: Date;
  end?: Date | undefined;
  price?: number;
  doctorId?: number | undefined;
  specializationId?: number;
  polyclinicId?: number;
}

export class DoctorEditDto implements IDoctorEditDto {
  id?: number | undefined;
  firstName?: string | undefined;
  middleName?: string | undefined;
  lastName?: string | undefined;
  phone?: string | undefined;
  adress?: string | undefined;
  longDesk?: string | undefined;
  shortDesk?: string | undefined;
  photo?: PhotoDto;
  practicesDto?: PracticeEditDto[] | undefined;

  constructor(data?: IDoctorEditDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.phone = _data["phone"];
      this.adress = _data["adress"];
      this.longDesk = _data["longDesk"];
      this.shortDesk = _data["shortDesk"];
      this.photo = _data["photo"] ? PhotoDto.fromJS(_data["photo"]) : <any>undefined;
      if (Array.isArray(_data["practicesDto"])) {
        this.practicesDto = [] as any;
        for (let item of _data["practicesDto"])
          this.practicesDto!.push(PracticeEditDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): DoctorEditDto {
    data = typeof data === 'object' ? data : {};
    let result = new DoctorEditDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["phone"] = this.phone;
    data["adress"] = this.adress;
    data["longDesk"] = this.longDesk;
    data["shortDesk"] = this.shortDesk;
    data["photo"] = this.photo ? this.photo.toJSON() : <any>undefined;
    if (Array.isArray(this.practicesDto)) {
      data["practicesDto"] = [];
      for (let item of this.practicesDto)
        data["practicesDto"].push(item.toJSON());
    }
    return data;
  }

  clone(): DoctorEditDto {
    const json = this.toJSON();
    let result = new DoctorEditDto();
    result.init(json);
    return result;
  }
}

export interface IDoctorEditDto {
  id?: number | undefined;
  firstName?: string | undefined;
  middleName?: string | undefined;
  lastName?: string | undefined;
  phone?: string | undefined;
  adress?: string | undefined;
  longDesk?: string | undefined;
  shortDesk?: string | undefined;
  photo?: PhotoDto;
  practicesDto?: PracticeEditDto[] | undefined;
}

export class PolyclinicDto implements IPolyclinicDto {
  id?: number;
  name?: string | undefined;
  address?: string | undefined;
  phone?: number;
  townId?: number;
  photos?: PhotoDto[] | undefined;

  constructor(data?: IPolyclinicDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.address = _data["address"];
      this.phone = _data["phone"];
      this.townId = _data["townId"];
      if (Array.isArray(_data["photos"])) {
        this.photos = [] as any;
        for (let item of _data["photos"])
          this.photos!.push(PhotoDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PolyclinicDto {
    data = typeof data === 'object' ? data : {};
    let result = new PolyclinicDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["address"] = this.address;
    data["phone"] = this.phone;
    data["townId"] = this.townId;
    if (Array.isArray(this.photos)) {
      data["photos"] = [];
      for (let item of this.photos)
        data["photos"].push(item.toJSON());
    }
    return data;
  }

  clone(): PolyclinicDto {
    const json = this.toJSON();
    let result = new PolyclinicDto();
    result.init(json);
    return result;
  }
}

export interface IPolyclinicDto {
  id?: number;
  name?: string | undefined;
  address?: string | undefined;
  phone?: number;
  townId?: number;
  photos?: PhotoDto[] | undefined;
}

export class SpecializationDto implements ISpecializationDto {
  id?: number | undefined;
  name?: string | undefined;
  doctors?: DoctorDto[] | undefined;

  constructor(data?: ISpecializationDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      if (Array.isArray(_data["doctors"])) {
        this.doctors = [] as any;
        for (let item of _data["doctors"])
          this.doctors!.push(DoctorDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): SpecializationDto {
    data = typeof data === 'object' ? data : {};
    let result = new SpecializationDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    if (Array.isArray(this.doctors)) {
      data["doctors"] = [];
      for (let item of this.doctors)
        data["doctors"].push(item.toJSON());
    }
    return data;
  }

  clone(): SpecializationDto {
    const json = this.toJSON();
    let result = new SpecializationDto();
    result.init(json);
    return result;
  }
}

export interface ISpecializationDto {
  id?: number | undefined;
  name?: string | undefined;
  doctors?: DoctorDto[] | undefined;
}

export class TownDto implements ITownDto {
  id?: number | undefined;
  name?: string | undefined;

  constructor(data?: ITownDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): TownDto {
    data = typeof data === 'object' ? data : {};
    let result = new TownDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    return data;
  }

  clone(): TownDto {
    const json = this.toJSON();
    let result = new TownDto();
    result.init(json);
    return result;
  }
}

export interface ITownDto {
  id?: number | undefined;
  name?: string | undefined;
}

export class DoctorDtoPaginationDto implements IDoctorDtoPaginationDto {
  elements?: DoctorDto[] | undefined;
  totalCount?: number;

  constructor(data?: IDoctorDtoPaginationDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["elements"])) {
        this.elements = [] as any;
        for (let item of _data["elements"])
          this.elements!.push(DoctorDto.fromJS(item));
      }
      this.totalCount = _data["totalCount"];
    }
  }

  static fromJS(data: any): DoctorDtoPaginationDto {
    data = typeof data === 'object' ? data : {};
    let result = new DoctorDtoPaginationDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.elements)) {
      data["elements"] = [];
      for (let item of this.elements)
        data["elements"].push(item.toJSON());
    }
    data["totalCount"] = this.totalCount;
    return data;
  }

  clone(): DoctorDtoPaginationDto {
    const json = this.toJSON();
    let result = new DoctorDtoPaginationDto();
    result.init(json);
    return result;
  }
}

export interface IDoctorDtoPaginationDto {
  elements?: DoctorDto[] | undefined;
  totalCount?: number;
}

export class DoctorViewDto implements IDoctorViewDto {
  id?: number;
  firstName?: string | undefined;
  middleName?: string | undefined;
  lastName?: string | undefined;
  phone?: string | undefined;
  adress?: string | undefined;
  longDesk?: string | undefined;
  shortDesk?: string | undefined;
  photo?: PhotoDto;
  practicesDto?: PracticeEditDto[] | undefined;

  constructor(data?: IDoctorViewDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.phone = _data["phone"];
      this.adress = _data["adress"];
      this.longDesk = _data["longDesk"];
      this.shortDesk = _data["shortDesk"];
      this.photo = _data["photo"] ? PhotoDto.fromJS(_data["photo"]) : <any>undefined;
      if (Array.isArray(_data["practicesDto"])) {
        this.practicesDto = [] as any;
        for (let item of _data["practicesDto"])
          this.practicesDto!.push(PracticeEditDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): DoctorViewDto {
    data = typeof data === 'object' ? data : {};
    let result = new DoctorViewDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["phone"] = this.phone;
    data["adress"] = this.adress;
    data["longDesk"] = this.longDesk;
    data["shortDesk"] = this.shortDesk;
    data["photo"] = this.photo ? this.photo.toJSON() : <any>undefined;
    if (Array.isArray(this.practicesDto)) {
      data["practicesDto"] = [];
      for (let item of this.practicesDto)
        data["practicesDto"].push(item.toJSON());
    }
    return data;
  }

  clone(): DoctorViewDto {
    const json = this.toJSON();
    let result = new DoctorViewDto();
    result.init(json);
    return result;
  }
}

export interface IDoctorViewDto {
  id?: number;
  firstName?: string | undefined;
  middleName?: string | undefined;
  lastName?: string | undefined;
  phone?: string | undefined;
  adress?: string | undefined;
  longDesk?: string | undefined;
  shortDesk?: string | undefined;
  photo?: PhotoDto;
  practicesDto?: PracticeEditDto[] | undefined;
}

export class SpecailizationWithDoctorsDto implements ISpecailizationWithDoctorsDto {
  id?: number;
  name?: string | undefined;
  doctorsCount?: number | undefined;

  constructor(data?: ISpecailizationWithDoctorsDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.doctorsCount = _data["doctorsCount"];
    }
  }

  static fromJS(data: any): SpecailizationWithDoctorsDto {
    data = typeof data === 'object' ? data : {};
    let result = new SpecailizationWithDoctorsDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["doctorsCount"] = this.doctorsCount;
    return data;
  }

  clone(): SpecailizationWithDoctorsDto {
    const json = this.toJSON();
    let result = new SpecailizationWithDoctorsDto();
    result.init(json);
    return result;
  }
}

export interface ISpecailizationWithDoctorsDto {
  id?: number;
  name?: string | undefined;
  doctorsCount?: number | undefined;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
